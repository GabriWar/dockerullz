#!/bin/bash

# HeavyStack - Supabase Startup Script
# Self-hosted Supabase with custom port configuration

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}🚀 HeavyStack - Supabase Startup${NC}"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}❌ Error: Docker is not running${NC}"
    exit 1
fi

# Load environment variables from main .env
if [ ! -f .env ]; then
    echo -e "${RED}❌ Error: Main .env file not found${NC}"
    exit 1
fi

echo -e "${BLUE}📋 Loading configuration from main .env...${NC}"
source .env

# Validate critical variables from the main .env and set safe defaults where reasonable
if [ -z "${SUPABASE_POSTGRES_PORT}" ]; then
    echo -e "${YELLOW}⚠️  SUPABASE_POSTGRES_PORT not set in main .env — defaulting to 5434${NC}"
    SUPABASE_POSTGRES_PORT=5434
fi

if [ -z "${SUPABASE_JWT_SECRET}" ]; then
    echo -e "${RED}❌ Error: SUPABASE_JWT_SECRET is not set in main .env — this is required${NC}"
    exit 1
fi

if [ -z "${SUPABASE_POSTGRES_PASSWORD}" ]; then
    echo -e "${RED}❌ Error: SUPABASE_POSTGRES_PASSWORD is not set in main .env — this is required${NC}"
    exit 1
fi

# Navigate to supabase-project directory
cd supabase-project

# Apply Kong fix for missing DASHBOARD credentials if needed
echo -e "${BLUE}🔧 Verifying Kong configuration fix...${NC}"
if ! grep -q "DASHBOARD_USERNAME:-admin" docker-compose.yml 2>/dev/null; then
    echo -e "${YELLOW}⚠️  Applying Kong configuration fix...${NC}"
    
    # Backup original file
    cp docker-compose.yml docker-compose.yml.backup 2>/dev/null || true
    
    # Apply fix using sed
    sed -i 's|DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}|DASHBOARD_USERNAME: ${DASHBOARD_USERNAME:-admin}|g' docker-compose.yml
    sed -i 's|DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}|DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD:-admin}|g' docker-compose.yml
    
    # Fix entrypoint to export variables before processing template
    if ! grep -q "export DASHBOARD_USERNAME" docker-compose.yml; then
        sed -i "s|entrypoint: bash -c 'eval \"echo \\\\\\\"\\\$\\\$(cat ~/temp.yml)\\\\\\\"\\\" > ~/kong.yml|entrypoint: bash -c 'export DASHBOARD_USERNAME=\${DASHBOARD_USERNAME:-admin} DASHBOARD_PASSWORD=\${DASHBOARD_PASSWORD:-admin}; eval \"echo \\\\\\\"\\\$\\\$(cat ~/temp.yml)\\\\\\\"\\\" > ~/kong.yml|g" docker-compose.yml
    fi
    
    echo -e "${GREEN}✓ Kong configuration fix applied${NC}"
else
    echo -e "${GREEN}✓ Kong configuration already fixed${NC}"
fi

# Generate supabase .env.example that documents variables from main .env
echo -e "${BLUE}📝 Generating Supabase .env.example file...${NC}"
cat > .env.example << 'EXAMPLE_EOF'
# ============================================
# Supabase Environment Variables Template
# ============================================
# This file documents which variables from the main .env file are used
# by the Supabase stack. DO NOT edit this file directly - it is generated
# from start-supabase.sh and will reference variables from ../.env
#
# The actual .env file is generated automatically from ../.env when you
# run ./start-supabase.sh from the repository root.
#
# Required variables that must be set in ../.env:
#   - SUPABASE_POSTGRES_PASSWORD (required)
#   - SUPABASE_JWT_SECRET (required, at least 32 characters)
#   - SUPABASE_POSTGRES_PORT (optional, defaults to 5434)
#
# Optional variables from ../.env:
#   - SUPABASE_DASHBOARD_USERNAME
#   - SUPABASE_DASHBOARD_PASSWORD
#   - SUPABASE_SECRET_KEY_BASE
#   - SUPABASE_VAULT_ENC_KEY
#   - SUPABASE_PG_META_CRYPTO_KEY
#   - SUPABASE_POOLER_PORT
#   - SUPABASE_POOLER_TENANT_ID
#   - SUPABASE_KONG_HTTP_PORT
#   - SUPABASE_KONG_HTTPS_PORT
#   - SUPABASE_SITE_URL
#   - SUPABASE_SMTP_HOST
#   - SUPABASE_SMTP_PORT
#   - SUPABASE_SMTP_USER
#   - SUPABASE_SMTP_PASS
#   - SUPABASE_ANALYTICS_PORT
#   - SUPABASE_DOCKER_SOCKET
#
# The start-supabase.sh script will generate the actual .env file
# from these variables in the main ../.env file.
EXAMPLE_EOF

echo -e "${GREEN}✓ Supabase .env.example created${NC}"

# Generate supabase .env from main environment variables
echo -e "${BLUE}📝 Generating Supabase .env file...${NC}"
cat > .env << ENV_EOF
############
# Secrets
############

POSTGRES_PASSWORD=${SUPABASE_POSTGRES_PASSWORD}
JWT_SECRET=${SUPABASE_JWT_SECRET}
ANON_KEY=WILL_BE_GENERATED
SERVICE_ROLE_KEY=WILL_BE_GENERATED
DASHBOARD_USERNAME=${SUPABASE_DASHBOARD_USERNAME:-heavystack}
DASHBOARD_PASSWORD=${SUPABASE_DASHBOARD_PASSWORD:-changeme}
SECRET_KEY_BASE=${SUPABASE_SECRET_KEY_BASE}
VAULT_ENC_KEY=${SUPABASE_VAULT_ENC_KEY}
PG_META_CRYPTO_KEY=${SUPABASE_PG_META_CRYPTO_KEY}

############
# Database
############

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=5432
POSTGRES_PORT_EXTERNAL=${SUPABASE_POSTGRES_PORT:-5434}

############
# Supavisor
############

POOLER_PROXY_PORT_TRANSACTION=${SUPABASE_POOLER_PORT}
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
POOLER_TENANT_ID=${SUPABASE_POOLER_TENANT_ID}
POOLER_DB_POOL_SIZE=5

############
# API Proxy
############

KONG_HTTP_PORT=${SUPABASE_KONG_HTTP_PORT}
KONG_HTTPS_PORT=${SUPABASE_KONG_HTTPS_PORT}

############
# API
############

PGRST_DB_SCHEMAS=public,storage,graphql_public

############
# Auth
############

SITE_URL=${SUPABASE_SITE_URL}
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=${SUPABASE_DISABLE_SIGNUP:-false}
API_EXTERNAL_URL=http://localhost:${SUPABASE_KONG_HTTP_PORT}

## Mailer Config
MAILER_URLPATHS_CONFIRMATION="/auth/v1/verify"
MAILER_URLPATHS_INVITE="/auth/v1/verify"
MAILER_URLPATHS_RECOVERY="/auth/v1/verify"
MAILER_URLPATHS_EMAIL_CHANGE="/auth/v1/verify"

## Email auth
ENABLE_EMAIL_SIGNUP=${SUPABASE_ENABLE_EMAIL_SIGNUP:-true}
ENABLE_EMAIL_AUTOCONFIRM=${SUPABASE_ENABLE_EMAIL_AUTOCONFIRM:-false}
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=${SUPABASE_SMTP_HOST}
SMTP_PORT=${SUPABASE_SMTP_PORT}
SMTP_USER=${SUPABASE_SMTP_USER}
SMTP_PASS=${SUPABASE_SMTP_PASS}
SMTP_SENDER_NAME=fake_sender
ENABLE_ANONYMOUS_USERS=${SUPABASE_ENABLE_ANONYMOUS_USERS:-false}

## Phone auth
ENABLE_PHONE_SIGNUP=${SUPABASE_ENABLE_PHONE_SIGNUP:-true}
ENABLE_PHONE_AUTOCONFIRM=${SUPABASE_ENABLE_PHONE_AUTOCONFIRM:-true}

############
# Studio
############

STUDIO_DEFAULT_ORGANIZATION=Default Organization
STUDIO_DEFAULT_PROJECT=Default Project
SUPABASE_PUBLIC_URL=http://localhost:${SUPABASE_KONG_HTTP_PORT}
IMGPROXY_ENABLE_WEBP_DETECTION=true
OPENAI_API_KEY=

############
# Functions
############

FUNCTIONS_VERIFY_JWT=false

############
# Logs
############

ANALYTICS_PORT=${SUPABASE_ANALYTICS_PORT:-4000}
LOGFLARE_PUBLIC_ACCESS_TOKEN=your-super-secret-and-long-logflare-key-public
LOGFLARE_PRIVATE_ACCESS_TOKEN=your-super-secret-and-long-logflare-key-private
DOCKER_SOCKET_LOCATION=${SUPABASE_DOCKER_SOCKET:-/var/run/docker.sock}
GOOGLE_PROJECT_ID=GOOGLE_PROJECT_ID
GOOGLE_PROJECT_NUMBER=GOOGLE_PROJECT_NUMBER
ENV_EOF

echo -e "${GREEN}✓ Supabase .env generated from main configuration${NC}"

# Restrict permissions on the generated env file since it contains secrets
chmod 600 .env || true

echo -e "${BLUE}📋 Checking configuration...${NC}"

# Check if ANON_KEY and SERVICE_ROLE_KEY need to be generated
if grep -q "ANON_KEY=WILL_BE_GENERATED" .env || grep -q "SERVICE_ROLE_KEY=WILL_BE_GENERATED" .env; then
    echo -e "${YELLOW}🔑 Generating JWT keys...${NC}"

    # Get JWT_SECRET from .env (preserve entire RHS even if it contains =)
    JWT_SECRET=$(sed -n 's/^JWT_SECRET=//p' .env)

    # Function to create JWT
    create_jwt() {
        local role=$1
        local iat=$(date +%s)
        local exp=$((iat + 315360000))  # 10 years

        # Header and payload
        header='{"alg":"HS256","typ":"JWT"}'
        payload="{\"role\":\"$role\",\"iss\":\"supabase\",\"iat\":$iat,\"exp\":$exp}"

        # Encode
        header_b64=$(echo -n "$header" | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')
        payload_b64=$(echo -n "$payload" | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')

        # Sign
        signature=$(echo -n "${header_b64}.${payload_b64}" | openssl dgst -sha256 -hmac "$JWT_SECRET" -binary | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')

        echo "${header_b64}.${payload_b64}.${signature}"
    }

    # Generate keys
    ANON_KEY=$(create_jwt "anon")
    SERVICE_ROLE_KEY=$(create_jwt "service_role")

    # Update .env file
    sed -i "s|ANON_KEY=.*|ANON_KEY=$ANON_KEY|" .env
    sed -i "s|SERVICE_ROLE_KEY=.*|SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY|" .env

    echo -e "${GREEN}✓ JWT keys generated${NC}"
fi

# Pull latest images
echo -e "${YELLOW}📥 Pulling latest Supabase images (this may take a few minutes)...${NC}"
docker compose pull

# Start services
echo -e "${GREEN}🔧 Starting Supabase services...${NC}"
docker compose up -d

# Wait a moment for services to initialize
sleep 3

# Check service status
echo ""
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}📦 Supabase Services Status:${NC}"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

docker compose ps

echo ""
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ Supabase Started Successfully!${NC}"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${YELLOW}📍 Access Points:${NC}"
echo -e "  ${CYAN}Studio Dashboard:${NC} http://localhost:8300"
echo -e "  ${CYAN}API Gateway:${NC}      http://localhost:8300"
echo -e "  ${CYAN}Database (pooled):${NC} postgresql://postgres.heavystack-tenant:<password>@localhost:6543/postgres"
echo -e "  ${CYAN}Database (direct):${NC} postgresql://postgres:<password>@localhost:5434/postgres"
echo ""
echo -e "${YELLOW}🔐 Credentials:${NC}"
echo -e "  ${CYAN}Dashboard User:${NC}     heavystack"
echo -e "  ${CYAN}Dashboard Pass:${NC}     (check .env file)"
echo -e "  ${CYAN}DB Password:${NC}        (check .env file)"
echo ""
echo -e "${YELLOW}📚 API Endpoints:${NC}"
echo -e "  ${CYAN}REST:${NC}     http://localhost:8300/rest/v1/"
echo -e "  ${CYAN}Auth:${NC}     http://localhost:8300/auth/v1/"
echo -e "  ${CYAN}Storage:${NC}  http://localhost:8300/storage/v1/"
echo -e "  ${CYAN}Realtime:${NC} http://localhost:8300/realtime/v1/"
echo ""
echo -e "${GREEN}💡 Tips:${NC}"
echo -e "  - View logs: ${CYAN}./logs.sh supabase-studio${NC} (or any service name)"
echo -e "  - Stop services: ${CYAN}cd supabase-project && docker compose down${NC}"
echo -e "  - Restart: ${CYAN}./start-supabase.sh${NC}"
echo ""
