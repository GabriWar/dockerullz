name: HeavyStack

x-netvisor-env: &netvisor-env
  NETVISOR_LOG_LEVEL: ${NETVISOR_LOG_LEVEL:-info}
  NETVISOR_SERVER_PORT: ${NETVISOR_SERVER_PORT:-60072}
  NETVISOR_DAEMON_PORT: ${NETVISOR_DAEMON_PORT:-60073}

services:
  # Portainer CE (Commented out)
  # portainer:
  #   ports:
  #     - 9000:9000
  #   container_name: portainer
  #   restart: always
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_data:/data
  #   image: portainer/portainer-ce:latest

  # Portainer Agent (Commented out)
  # portainer_agent:
  #   image: portainer/agent:latest
  #   container_name: portainer_agent
  #   restart: always
  #   ports:
  #     - 9001:9001
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/lib/docker/volumes:/var/lib/docker/volumes
  #   environment:
  #     - AGENT_SECRET=${AGENT_SECRET}

  # Vaultwarden
  vaultwarden:
    ports:
      - 8100:80
    container_name: vaultwarden
    restart: unless-stopped
    image: vaultwarden/server:latest
    environment:
      - DOMAIN=${VAULTWARDEN_DOMAIN}
      - WEBSOCKET_ENABLED=true
      - WEBSOCKET_ADDRESS=0.0.0.0
      - WEBSOCKET_PORT=3012
    volumes:
      - vaultwarden_data:/data

  # NOTE: Jellyfin and Media Stack services (Jellyseerr, Sonarr, Radarr, Prowlarr, FlareSolverr, qBittorrent)
  # are now in docker-compose.sudo.yml due to permission requirements
  # Start them with: ./start-sudo.sh

  # Homepage (Commented out)
  # homepage:
  #   image: ghcr.io/gethomepage/homepage:latest
  #   container_name: homepage
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - ./configs/homepage:/app/config
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - HOMEPAGE_ALLOWED_HOSTS=${HOMEPAGE_ALLOWED_HOSTS}
  #   restart: unless-stopped

  # Uptime Kuma
  uptime-kuma:
    image: louislam/uptime-kuma:2
    container_name: uptime-kuma
    ports:
      - 3001:3001
    volumes:
      - uptime_kuma_data:/app/data
    restart: unless-stopped

  # Nextcloud AIO
  nextcloud-aio-mastercontainer:
    image: ghcr.io/nextcloud-releases/all-in-one:latest
    container_name: nextcloud-aio-mastercontainer
    init: true
    ports:
      - ${NEXTCLOUD_HTTP_PORT:-80}:80
      - ${NEXTCLOUD_ADMIN_PORT:-8888}:8080
      - ${NEXTCLOUD_HTTPS_PORT:-8443}:8443
    volumes:
      - nextcloud_aio_mastercontainer:/mnt/docker-aio-config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    environment:
      # Standalone mode (no reverse proxy) - Apache listens on port 443
      - APACHE_IP_BINDING=0.0.0.0
      - APACHE_PORT=443
      - SKIP_DOMAIN_VALIDATION=true
      # Nextcloud AIO data directory (where Nextcloud files are stored)
      - NEXTCLOUD_DATADIR=${NEXTCLOUD_DATADIR}
      # Backup location for Nextcloud AIO (borg backups)
      - BORG_BACKUP_DIRECTORY=${NEXTCLOUD_BACKUP_DIR}
      # Additional mount point (optional - for external storage)
      - NEXTCLOUD_MOUNT=${NEXTCLOUD_MOUNT}

  # Open Notebook
  open-notebook:
    image: lfnovo/open_notebook:v1-latest-single
    container_name: open-notebook
    ports:
      - ${OPEN_NOTEBOOK_PORT:-8502}:8502
      - ${OPEN_NOTEBOOK_API_PORT:-5056}:5055
    volumes:
      - ./notebook_data:/app/data
      - ./surreal_data:/mydata
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_URL=${OPENNOTEBOOK_API_URL}
      - SURREAL_URL=${SURREAL_URL}
      - SURREAL_USER=${SURREAL_USER}
      - SURREAL_PASSWORD=${SURREAL_PASSWORD}
      - SURREAL_NAMESPACE=${SURREAL_NAMESPACE}
      - SURREAL_DATABASE=${SURREAL_DATABASE}
    restart: unless-stopped

  # Duplicati
  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    environment:
      - PUID=${DUPLICATI_PUID}
      - PGID=${DUPLICATI_PGID}
      - TZ=${DUPLICATI_TZ}
    volumes:
      - ./configs/duplicati/config:/config
      - ./configs:/source
      - ./docker-compose.yml:/source/docker-compose.yml
      - ./configs/duplicati/restore:/restore
    networks:
      - duplicati
    ports:
      - 8200:8200
    restart: unless-stopped

  # Syncthing
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    hostname: syncthing
    environment:
      - PUID=${SYNCTHING_PUID:-1000}
      - PGID=${SYNCTHING_PGID:-1000}
      - TZ=${SYNCTHING_TZ:-America/Sao_Paulo}
    volumes:
      - ./configs/syncthing:/config
      - ${SYNCTHING_DATA1:-./syncthing_data1}:/data1
      - ${SYNCTHING_DATA2:-./syncthing_data2}:/data2
    ports:
      - ${SYNCTHING_WEB_PORT:-8384}:8384
      - ${SYNCTHING_LISTEN_PORT:-22000}:22000/tcp
      - ${SYNCTHING_LISTEN_PORT:-22000}:22000/udp
      - ${SYNCTHING_DISCOVERY_PORT:-21027}:21027/udp
    restart: unless-stopped

  # Bazarr
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    hostname: bazarr
    networks:
      - mediarr
    environment:
      - PUID=${BAZARR_PUID}
      - PGID=${BAZARR_PGID}
      - TZ=${BAZARR_TZ}
    volumes:
      - ./configs/mediarr/bazarr:/config
      - myMedia:/mnt/media
    ports:
      - 6767:6767
    restart: unless-stopped

  # Readarr (Temporarily commented - manifest issue, will debug separately)
  # readarr:
  #   image: lscr.io/linuxserver/readarr:nightly
  #   container_name: readarr
  #   hostname: readarr
  #   networks:
  #     - mediarr
  #   environment:
  #     - PUID=${READARR_PUID}
  #     - PGID=${READARR_PGID}
  #     - TZ=${READARR_TZ}
  #   volumes:
  #     - ./configs/mediarr/readarr:/config
  #     - myMedia:/mnt/media
  #     - myDlFolders:/mnt/downloads
  #   ports:
  #     - 8787:8787
  #   restart: unless-stopped

  # Lidarr (Commented out - depends on prowlarr and qbittorrent which are in docker-compose.sudo.yml)
  # Start with: ./start-sudo.sh
  # lidarr:
  #   image: lscr.io/linuxserver/lidarr:latest
  #   container_name: lidarr
  #   hostname: lidarr
  #   networks:
  #     - mediarr
  #   environment:
  #     - PUID=${LIDARR_PUID}
  #     - PGID=${LIDARR_PGID}
  #     - TZ=${LIDARR_TZ}
  #   volumes:
  #     - ./configs/mediarr/lidarr:/config
  #     - myMedia:/mnt/media
  #     - myDlFolders:/mnt/downloads
  #   depends_on:
  #     - prowlarr
  #     - qbittorrent
  #   ports:
  #     - 8686:8686
  #   restart: unless-stopped

  # Ollama
  ollama:
    image: ollama/ollama:${OLLAMA_DOCKER_TAG:-latest}
    container_name: ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - ${OLLAMA_PORT:-11434}:11434
    restart: unless-stopped
    # Para suporte a GPU NVIDIA, descomente as linhas abaixo:
    # deploy:
    #     resources:
    #         reservations:
    #             devices:
    #                 - driver: nvidia
    #                   count: all
    #                   capabilities: [gpu]

  # Open WebUI
  open-webui:
    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG:-main-slim}
    container_name: open-webui
    ports:
      - ${OPEN_WEBUI_PORT:-3002}:8080
    volumes:
      - open_webui_data:/app/backend/data
    environment:
      - WEBUI_AUTH=False # Modo single-user (sem login)
      - OLLAMA_BASE_URL=http://ollama:11434
    depends_on:
      - ollama
    restart: unless-stopped
    extra_hosts:
      - host.docker.internal:host-gateway

  daemon:
    image: mayanayza/netvisor-daemon:latest
    container_name: netvisor-daemon
    network_mode: host
    privileged: true
    restart: unless-stopped
    environment:
      <<: *netvisor-env
      NETVISOR_SERVER_TARGET: ${NETVISOR_SERVER_TARGET:-http://127.0.0.1}
      NETVISOR_PORT: ${NETVISOR_DAEMON_PORT:-60073}
      NETVISOR_BIND_ADDRESS: ${NETVISOR_BIND_ADDRESS:-0.0.0.0}
      NETVISOR_NAME: ${NETVISOR_NAME:-netvisor-daemon}
      NETVISOR_HEARTBEAT_INTERVAL: ${NETVISOR_HEARTBEAT_INTERVAL:-30}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${NETVISOR_DAEMON_PORT:-60073}/api/health || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 15
    volumes:
      - daemon-config:/root/.config/netvisor/daemon
      # Comment out the line below to disable docker discovery
      - /var/run/docker.sock:/var/run/docker.sock:ro

  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: netvisor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - netvisor

  server:
    image: mayanayza/netvisor-server:latest
    ports:
      - "${NETVISOR_SERVER_PORT:-60072}:${NETVISOR_SERVER_PORT:-60072}"
    environment:
      <<: *netvisor-env
      NETVISOR_DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/netvisor
      NETVISOR_WEB_EXTERNAL_PATH: /app/static
      # 172.17.0.1 is Docker's default bridge gateway. If your's is different, make sure to change it.
      NETVISOR_INTEGRATED_DAEMON_URL: http://172.17.0.1:${NETVISOR_DAEMON_PORT:-60073}
    volumes:
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      daemon:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - netvisor

  # Apprise - Notification Service API
  apprise:
    image: caronc/apprise:latest
    container_name: apprise
    ports:
      - "${APPRISE_PORT:-8000}:8000"
    environment:
      - PUID=${APPRISE_PUID:-1000}
      - PGID=${APPRISE_PGID:-1000}
      - APPRISE_STATEFUL_MODE=${APPRISE_STATEFUL_MODE:-simple}
      - APPRISE_WORKER_COUNT=${APPRISE_WORKER_COUNT:-1}
      - TZ=${APPRISE_TZ:-America/Sao_Paulo}
    volumes:
      - ./configs/apprise:/config
      - ./configs/apprise/plugin:/plugin
      - ./configs/apprise/attach:/attach
    restart: unless-stopped

  # Browserless - Chrome browser API for web scraping (used by changedetection)
  browserless:
    image: dgtlmoon/sockpuppetbrowser:latest
    container_name: browserless
    hostname: browserless
    ports:
      - "${BROWSERLESS_PORT:-3000}:3000"
    environment:
      - DEFAULT_LAUNCH_ARGS=["--window-size=1920,1080"]
    volumes:
      - /dev/shm:/dev/shm
    cap_add:
      - SYS_ADMIN
    restart: unless-stopped

  # Changedetection.io - Monitor websites for changes
  changedetection:
    image: ghcr.io/dgtlmoon/changedetection.io:latest
    container_name: changedetection
    hostname: changedetection
    ports:
      - "${CHANGEDETECTION_PORT:-5000}:5000"
    environment:
      - PORT=${CHANGEDETECTION_PORT:-5000}
      - LOGGER_LEVEL=${CHANGEDETECTION_LOG_LEVEL:-DEBUG}
      - PLAYWRIGHT_DRIVER_URL=ws://browserless:3000
      - FETCH_WORKERS=${CHANGEDETECTION_FETCH_WORKERS:-10}
      - MINIMUM_SECONDS_RECHECK_TIME=${CHANGEDETECTION_MIN_RECHECK:-3}
      - TZ=${CHANGEDETECTION_TZ:-America/Sao_Paulo}
      - BASE_URL=${CHANGEDETECTION_BASE_URL:-http://localhost:5000}
      - HIDE_REFERER=${CHANGEDETECTION_HIDE_REFERER:-false}
      - DISABLE_VERSION_CHECK=${CHANGEDETECTION_DISABLE_VERSION_CHECK:-false}
      - ALLOW_FILE_URI=${CHANGEDETECTION_ALLOW_FILE_URI:-False}
    volumes:
      - changedetection_data:/datastore
      # Uncomment to use custom proxy configuration
      # - ./configs/changedetection/proxies.json:/datastore/proxies.json
    depends_on:
      - browserless
    restart: unless-stopped

  # Komodo - MongoDB
  komodo-mongo:
    image: mongo:latest
    container_name: komodo-mongo
    labels:
      komodo.skip: ""
    command: --quiet --wiredTigerCacheSizeGB 0.25
    restart: unless-stopped
    # Uncomment to expose MongoDB port
    # ports:
    #   - "${KOMODO_MONGO_PORT:-27017}:27017"
    volumes:
      - komodo_mongo_data:/data/db
      - komodo_mongo_config:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${KOMODO_DB_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${KOMODO_DB_PASSWORD:-password}
    networks:
      - komodo

  # Komodo Core
  komodo-core:
    image: ghcr.io/moghtech/komodo-core:${KOMODO_IMAGE_TAG:-latest}
    container_name: komodo-core
    labels:
      komodo.skip: ""
    restart: unless-stopped
    depends_on:
      - komodo-mongo
    ports:
      - "${KOMODO_CORE_PORT:-9120}:9120"
    environment:
      KOMODO_DATABASE_ADDRESS: komodo-mongo:27017
      KOMODO_DATABASE_USERNAME: ${KOMODO_DB_USERNAME:-root}
      KOMODO_DATABASE_PASSWORD: ${KOMODO_DB_PASSWORD:-password}
      KOMODO_HOST: ${KOMODO_HOST:-http://localhost:9120}
      KOMODO_LOCAL_AUTH: ${KOMODO_LOCAL_AUTH:-true}
      KOMODO_INIT_ADMIN_USERNAME: ${KOMODO_INIT_ADMIN_USERNAME:-admin}
      KOMODO_INIT_ADMIN_PASSWORD: ${KOMODO_INIT_ADMIN_PASSWORD:-changeme}
      KOMODO_ENABLE_NEW_USERS: ${KOMODO_ENABLE_NEW_USERS:-true}
      KOMODO_PASSKEY: ${KOMODO_PASSKEY:-default-passkey-changeme}
      KOMODO_JWT_SECRET: ${KOMODO_JWT_SECRET:-}
      KOMODO_TITLE: ${KOMODO_TITLE:-Komodo}
      KOMODO_FIRST_SERVER: ${KOMODO_FIRST_SERVER:-http://komodo-periphery:8120}
      KOMODO_FIRST_SERVER_NAME: ${KOMODO_FIRST_SERVER_NAME:-Local}
    volumes:
      - ${KOMODO_BACKUPS_PATH:-./komodo-backups}:/backups
      # Uncomment to mount sync files
      # - ${KOMODO_SYNC_PATH:-./komodo-syncs}:/syncs
      # Uncomment to mount custom config file
      # - ${KOMODO_CONFIG_PATH:-./configs/komodo/core.config.toml}:/config/core.config.toml
    networks:
      - komodo

  # Komodo Periphery
  komodo-periphery:
    image: ghcr.io/moghtech/komodo-periphery:${KOMODO_IMAGE_TAG:-latest}
    container_name: komodo-periphery
    labels:
      komodo.skip: ""
    restart: unless-stopped
    privileged: true
    environment:
      PERIPHERY_PASSKEYS: ${KOMODO_PASSKEY:-default-passkey-changeme}
      PERIPHERY_SSL_ENABLED: ${KOMODO_PERIPHERY_SSL_ENABLED:-false}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/proc
      - ${KOMODO_PERIPHERY_ROOT:-./komodo-periphery}:/etc/komodo
    networks:
      - komodo

  # Portracker - Container Port Tracker
  portracker:
    image: mostafawahied/portracker:latest
    container_name: portracker
    restart: unless-stopped
    network_mode: host
    volumes:
      - ./portracker-data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DATABASE_PATH=/data/portracker.db
      - PORT=${PORTracker_PORT:-4999}
      # Optional: For enhanced TrueNAS features
      # - TRUENAS_API_KEY=${PORTracker_TRUENAS_API_KEY:-}

  # Pi-hole - Network-wide ad blocking
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      # DNS Ports
      - "${PIHOLE_DNS_PORT:-53}:53/tcp"
      - "${PIHOLE_DNS_PORT:-53}:53/udp"
      # Default HTTP Port
      - "${PIHOLE_HTTP_PORT:-80}:80/tcp"
      # Default HTTPS Port. FTL will generate a self-signed certificate
      - "${PIHOLE_HTTPS_PORT:-443}:443/tcp"
      # Uncomment the line below if you are using Pi-hole as your DHCP server
      # - "${PIHOLE_DHCP_PORT:-67}:67/udp"
      # Uncomment the line below if you are using Pi-hole as your NTP server
      # - "${PIHOLE_NTP_PORT:-123}:123/udp"
    environment:
      # Set the appropriate timezone for your location
      TZ: ${PIHOLE_TZ:-America/Sao_Paulo}
      # Set a password to access the web interface. Not setting one will result in a random password being assigned
      FTLCONF_webserver_api_password: ${PIHOLE_WEBPASSWORD:-}
      # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
      FTLCONF_dns_listeningMode: ${PIHOLE_DNS_LISTENING_MODE:-all}
      # Web interface port (internal)
      WEBPORT: ${PIHOLE_WEBPORT:-80}
      # DNS port (internal)
      DNSMASQ_LISTENING: ${PIHOLE_DNSMASQ_LISTENING:-all}
    volumes:
      # For persisting Pi-hole's databases and common configuration file
      - ./configs/pihole:/etc/pihole
      # Uncomment the below if you have custom dnsmasq config files that you want to persist
      # - ./configs/pihole-dnsmasq:/etc/dnsmasq.d
    cap_add:
      # Required if you are using Pi-hole as your DHCP server, else not needed
      - NET_ADMIN
      # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
      - SYS_TIME
      # Optional, if Pi-hole should get some more processing time
      - SYS_NICE
    restart: unless-stopped

networks:
  duplicati:
    driver: bridge
  mediarr:
    driver: bridge
  firecrawl:
    driver: bridge
  netvisor:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
          gateway: 172.31.0.1
  komodo:
    driver: bridge

volumes:
  portainer_data:
  vaultwarden_data:
  netdataconfig:
  netdatalib:
  netdatacache:
  n8n_data:
  uptime_kuma_data:
  nextcloud_aio_mastercontainer:
  ollama_data:
  open_webui_data:
  firecrawl_postgres_data:
  firecrawl_redis_data:
  # myMedia and myDlFolders volumes are now managed in docker-compose.sudo.yml
  myMedia:
    external: true
    name: heavystack_myMedia
  myDlFolders:
    external: true
    name: heavystack_myDlFolders
  postgres_data:
  daemon-config:
  changedetection_data:
  komodo_mongo_data:
  komodo_mongo_config: